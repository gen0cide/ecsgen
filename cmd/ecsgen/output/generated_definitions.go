// Code generated by ecsgen; DO NOT EDIT.
package output

// Agent defines the object located at ECS path agent.
type Agent struct {
	EphemeralID string `json:"ephemeral_id,omitempty" yaml:"ephemeral_id,omitempty" ecs:"agent.ephemeral_id"`
	ID          string `json:"id,omitempty" yaml:"id,omitempty" ecs:"agent.id"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty" ecs:"agent.name"`
	Type        string `json:"type,omitempty" yaml:"type,omitempty" ecs:"agent.type"`
	Version     string `json:"version,omitempty" yaml:"version,omitempty" ecs:"agent.version"`
}

// AS defines the object located at ECS path as.
type AS struct {
	Number       int64          `json:"number,omitempty" yaml:"number,omitempty" ecs:"as.number"`
	Organization ASOrganization `json:"organization,omitempty" yaml:"organization,omitempty" ecs:"as.organization"`
}

// ASOrganization defines the object located at ECS path as.organization.
type ASOrganization struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"as.organization.name"`
}

// Client defines the object located at ECS path client.
type Client struct {
	Address          string     `json:"address,omitempty" yaml:"address,omitempty" ecs:"client.address"`
	AS               ClientAS   `json:"as,omitempty" yaml:"as,omitempty" ecs:"client.as"`
	Bytes            int64      `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"client.bytes"`
	Domain           string     `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"client.domain"`
	Geo              ClientGeo  `json:"geo,omitempty" yaml:"geo,omitempty" ecs:"client.geo"`
	IP               string     `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"client.ip"`
	MAC              string     `json:"mac,omitempty" yaml:"mac,omitempty" ecs:"client.mac"`
	NAT              ClientNAT  `json:"nat,omitempty" yaml:"nat,omitempty" ecs:"client.nat"`
	Packets          int64      `json:"packets,omitempty" yaml:"packets,omitempty" ecs:"client.packets"`
	Port             int64      `json:"port,omitempty" yaml:"port,omitempty" ecs:"client.port"`
	RegisteredDomain string     `json:"registered_domain,omitempty" yaml:"registered_domain,omitempty" ecs:"client.registered_domain"`
	TopLevelDomain   string     `json:"top_level_domain,omitempty" yaml:"top_level_domain,omitempty" ecs:"client.top_level_domain"`
	User             ClientUser `json:"user,omitempty" yaml:"user,omitempty" ecs:"client.user"`
}

// ClientAS defines the object located at ECS path client.as.
type ClientAS struct {
	Number       int64                `json:"number,omitempty" yaml:"number,omitempty" ecs:"client.as.number"`
	Organization ClientASOrganization `json:"organization,omitempty" yaml:"organization,omitempty" ecs:"client.as.organization"`
}

// ClientASOrganization defines the object located at ECS path client.as.organization.
type ClientASOrganization struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"client.as.organization.name"`
}

// ClientGeo defines the object located at ECS path client.geo.
type ClientGeo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"client.geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"client.geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"client.geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"client.geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"client.geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"client.geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"client.geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"client.geo.region_name"`
}

// ClientNAT defines the object located at ECS path client.nat.
type ClientNAT struct {
	IP   string `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"client.nat.ip"`
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" ecs:"client.nat.port"`
}

// ClientUser defines the object located at ECS path client.user.
type ClientUser struct {
	Domain   string          `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"client.user.domain"`
	Email    string          `json:"email,omitempty" yaml:"email,omitempty" ecs:"client.user.email"`
	FullName string          `json:"full_name,omitempty" yaml:"full_name,omitempty" ecs:"client.user.full_name"`
	Group    ClientUserGroup `json:"group,omitempty" yaml:"group,omitempty" ecs:"client.user.group"`
	Hash     string          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"client.user.hash"`
	ID       string          `json:"id,omitempty" yaml:"id,omitempty" ecs:"client.user.id"`
	Name     string          `json:"name,omitempty" yaml:"name,omitempty" ecs:"client.user.name"`
}

// ClientUserGroup defines the object located at ECS path client.user.group.
type ClientUserGroup struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"client.user.group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"client.user.group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"client.user.group.name"`
}

// Cloud defines the object located at ECS path cloud.
type Cloud struct {
	Account          CloudAccount  `json:"account,omitempty" yaml:"account,omitempty" ecs:"cloud.account"`
	AvailabilityZone string        `json:"availability_zone,omitempty" yaml:"availability_zone,omitempty" ecs:"cloud.availability_zone"`
	Instance         CloudInstance `json:"instance,omitempty" yaml:"instance,omitempty" ecs:"cloud.instance"`
	Machine          CloudMachine  `json:"machine,omitempty" yaml:"machine,omitempty" ecs:"cloud.machine"`
	Provider         string        `json:"provider,omitempty" yaml:"provider,omitempty" ecs:"cloud.provider"`
	Region           string        `json:"region,omitempty" yaml:"region,omitempty" ecs:"cloud.region"`
}

// CloudAccount defines the object located at ECS path cloud.account.
type CloudAccount struct {
	ID string `json:"id,omitempty" yaml:"id,omitempty" ecs:"cloud.account.id"`
}

// CloudInstance defines the object located at ECS path cloud.instance.
type CloudInstance struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"cloud.instance.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"cloud.instance.name"`
}

// CloudMachine defines the object located at ECS path cloud.machine.
type CloudMachine struct {
	Type string `json:"type,omitempty" yaml:"type,omitempty" ecs:"cloud.machine.type"`
}

// CodeSignature defines the object located at ECS path code_signature.
type CodeSignature struct {
	Exists      bool   `json:"exists,omitempty" yaml:"exists,omitempty" ecs:"code_signature.exists"`
	Status      string `json:"status,omitempty" yaml:"status,omitempty" ecs:"code_signature.status"`
	SubjectName string `json:"subject_name,omitempty" yaml:"subject_name,omitempty" ecs:"code_signature.subject_name"`
	Trusted     bool   `json:"trusted,omitempty" yaml:"trusted,omitempty" ecs:"code_signature.trusted"`
	Valid       bool   `json:"valid,omitempty" yaml:"valid,omitempty" ecs:"code_signature.valid"`
}

// Container defines the object located at ECS path container.
type Container struct {
	ID      string                 `json:"id,omitempty" yaml:"id,omitempty" ecs:"container.id"`
	Image   ContainerImage         `json:"image,omitempty" yaml:"image,omitempty" ecs:"container.image"`
	Labels  map[string]interface{} `json:"labels,omitempty" yaml:"labels,omitempty" ecs:"container.labels"`
	Name    string                 `json:"name,omitempty" yaml:"name,omitempty" ecs:"container.name"`
	Runtime string                 `json:"runtime,omitempty" yaml:"runtime,omitempty" ecs:"container.runtime"`
}

// ContainerImage defines the object located at ECS path container.image.
type ContainerImage struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"container.image.name"`
	Tag  string `json:"tag,omitempty" yaml:"tag,omitempty" ecs:"container.image.tag"`
}

// Destination defines the object located at ECS path destination.
type Destination struct {
	Address          string          `json:"address,omitempty" yaml:"address,omitempty" ecs:"destination.address"`
	AS               DestinationAS   `json:"as,omitempty" yaml:"as,omitempty" ecs:"destination.as"`
	Bytes            int64           `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"destination.bytes"`
	Domain           string          `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"destination.domain"`
	Geo              DestinationGeo  `json:"geo,omitempty" yaml:"geo,omitempty" ecs:"destination.geo"`
	IP               string          `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"destination.ip"`
	MAC              string          `json:"mac,omitempty" yaml:"mac,omitempty" ecs:"destination.mac"`
	NAT              DestinationNAT  `json:"nat,omitempty" yaml:"nat,omitempty" ecs:"destination.nat"`
	Packets          int64           `json:"packets,omitempty" yaml:"packets,omitempty" ecs:"destination.packets"`
	Port             int64           `json:"port,omitempty" yaml:"port,omitempty" ecs:"destination.port"`
	RegisteredDomain string          `json:"registered_domain,omitempty" yaml:"registered_domain,omitempty" ecs:"destination.registered_domain"`
	TopLevelDomain   string          `json:"top_level_domain,omitempty" yaml:"top_level_domain,omitempty" ecs:"destination.top_level_domain"`
	User             DestinationUser `json:"user,omitempty" yaml:"user,omitempty" ecs:"destination.user"`
}

// DestinationAS defines the object located at ECS path destination.as.
type DestinationAS struct {
	Number       int64                     `json:"number,omitempty" yaml:"number,omitempty" ecs:"destination.as.number"`
	Organization DestinationASOrganization `json:"organization,omitempty" yaml:"organization,omitempty" ecs:"destination.as.organization"`
}

// DestinationASOrganization defines the object located at ECS path destination.as.organization.
type DestinationASOrganization struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"destination.as.organization.name"`
}

// DestinationGeo defines the object located at ECS path destination.geo.
type DestinationGeo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"destination.geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"destination.geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"destination.geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"destination.geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"destination.geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"destination.geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"destination.geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"destination.geo.region_name"`
}

// DestinationNAT defines the object located at ECS path destination.nat.
type DestinationNAT struct {
	IP   string `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"destination.nat.ip"`
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" ecs:"destination.nat.port"`
}

// DestinationUser defines the object located at ECS path destination.user.
type DestinationUser struct {
	Domain   string               `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"destination.user.domain"`
	Email    string               `json:"email,omitempty" yaml:"email,omitempty" ecs:"destination.user.email"`
	FullName string               `json:"full_name,omitempty" yaml:"full_name,omitempty" ecs:"destination.user.full_name"`
	Group    DestinationUserGroup `json:"group,omitempty" yaml:"group,omitempty" ecs:"destination.user.group"`
	Hash     string               `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"destination.user.hash"`
	ID       string               `json:"id,omitempty" yaml:"id,omitempty" ecs:"destination.user.id"`
	Name     string               `json:"name,omitempty" yaml:"name,omitempty" ecs:"destination.user.name"`
}

// DestinationUserGroup defines the object located at ECS path destination.user.group.
type DestinationUserGroup struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"destination.user.group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"destination.user.group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"destination.user.group.name"`
}

// DLL defines the object located at ECS path dll.
type DLL struct {
	CodeSignature DLLCodeSignature `json:"code_signature,omitempty" yaml:"code_signature,omitempty" ecs:"dll.code_signature"`
	Hash          DLLHash          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"dll.hash"`
	Name          string           `json:"name,omitempty" yaml:"name,omitempty" ecs:"dll.name"`
	Path          string           `json:"path,omitempty" yaml:"path,omitempty" ecs:"dll.path"`
	PE            DLLPE            `json:"pe,omitempty" yaml:"pe,omitempty" ecs:"dll.pe"`
}

// DLLCodeSignature defines the object located at ECS path dll.code_signature.
type DLLCodeSignature struct {
	Exists      bool   `json:"exists,omitempty" yaml:"exists,omitempty" ecs:"dll.code_signature.exists"`
	Status      string `json:"status,omitempty" yaml:"status,omitempty" ecs:"dll.code_signature.status"`
	SubjectName string `json:"subject_name,omitempty" yaml:"subject_name,omitempty" ecs:"dll.code_signature.subject_name"`
	Trusted     bool   `json:"trusted,omitempty" yaml:"trusted,omitempty" ecs:"dll.code_signature.trusted"`
	Valid       bool   `json:"valid,omitempty" yaml:"valid,omitempty" ecs:"dll.code_signature.valid"`
}

// DLLHash defines the object located at ECS path dll.hash.
type DLLHash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"dll.hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"dll.hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"dll.hash.sha256"`
	SHA512 string `json:"sha512,omitempty" yaml:"sha512,omitempty" ecs:"dll.hash.sha512"`
}

// DLLPE defines the object located at ECS path dll.pe.
type DLLPE struct {
	Company          string `json:"company,omitempty" yaml:"company,omitempty" ecs:"dll.pe.company"`
	Description      string `json:"description,omitempty" yaml:"description,omitempty" ecs:"dll.pe.description"`
	FileVersion      string `json:"file_version,omitempty" yaml:"file_version,omitempty" ecs:"dll.pe.file_version"`
	OriginalFileName string `json:"original_file_name,omitempty" yaml:"original_file_name,omitempty" ecs:"dll.pe.original_file_name"`
	Product          string `json:"product,omitempty" yaml:"product,omitempty" ecs:"dll.pe.product"`
}

// DNS defines the object located at ECS path dns.
type DNS struct {
	Answers      []DNSAnswers `json:"answers,omitempty" yaml:"answers,omitempty" ecs:"dns.answers"`
	HeaderFlags  string       `json:"header_flags,omitempty" yaml:"header_flags,omitempty" ecs:"dns.header_flags"`
	ID           string       `json:"id,omitempty" yaml:"id,omitempty" ecs:"dns.id"`
	OpCode       string       `json:"op_code,omitempty" yaml:"op_code,omitempty" ecs:"dns.op_code"`
	Question     DNSQuestion  `json:"question,omitempty" yaml:"question,omitempty" ecs:"dns.question"`
	ResolvedIP   string       `json:"resolved_ip,omitempty" yaml:"resolved_ip,omitempty" ecs:"dns.resolved_ip"`
	ResponseCode string       `json:"response_code,omitempty" yaml:"response_code,omitempty" ecs:"dns.response_code"`
	Type         string       `json:"type,omitempty" yaml:"type,omitempty" ecs:"dns.type"`
}

// DNSAnswers defines the object located at ECS path dns.answers.
type DNSAnswers struct {
	Class string `json:"class,omitempty" yaml:"class,omitempty" ecs:"dns.answers.class"`
	Data  string `json:"data,omitempty" yaml:"data,omitempty" ecs:"dns.answers.data"`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" ecs:"dns.answers.name"`
	TTL   int64  `json:"ttl,omitempty" yaml:"ttl,omitempty" ecs:"dns.answers.ttl"`
	Type  string `json:"type,omitempty" yaml:"type,omitempty" ecs:"dns.answers.type"`
}

// DNSQuestion defines the object located at ECS path dns.question.
type DNSQuestion struct {
	Class            string `json:"class,omitempty" yaml:"class,omitempty" ecs:"dns.question.class"`
	Name             string `json:"name,omitempty" yaml:"name,omitempty" ecs:"dns.question.name"`
	RegisteredDomain string `json:"registered_domain,omitempty" yaml:"registered_domain,omitempty" ecs:"dns.question.registered_domain"`
	Subdomain        string `json:"subdomain,omitempty" yaml:"subdomain,omitempty" ecs:"dns.question.subdomain"`
	TopLevelDomain   string `json:"top_level_domain,omitempty" yaml:"top_level_domain,omitempty" ecs:"dns.question.top_level_domain"`
	Type             string `json:"type,omitempty" yaml:"type,omitempty" ecs:"dns.question.type"`
}

// ECS defines the object located at ECS path ecs.
type ECS struct {
	Version string `json:"version,omitempty" yaml:"version,omitempty" ecs:"ecs.version"`
}

// Error defines the object located at ECS path error.
type Error struct {
	Code       string `json:"code,omitempty" yaml:"code,omitempty" ecs:"error.code"`
	ID         string `json:"id,omitempty" yaml:"id,omitempty" ecs:"error.id"`
	Message    string `json:"message,omitempty" yaml:"message,omitempty" ecs:"error.message"`
	StackTrace string `json:"stack_trace,omitempty" yaml:"stack_trace,omitempty" ecs:"error.stack_trace"`
	Type       string `json:"type,omitempty" yaml:"type,omitempty" ecs:"error.type"`
}

// Event defines the object located at ECS path event.
type Event struct {
	Action        string        `json:"action,omitempty" yaml:"action,omitempty" ecs:"event.action"`
	Category      string        `json:"category,omitempty" yaml:"category,omitempty" ecs:"event.category"`
	Code          string        `json:"code,omitempty" yaml:"code,omitempty" ecs:"event.code"`
	Created       time.Time     `json:"created,omitempty" yaml:"created,omitempty" ecs:"event.created"`
	Dataset       string        `json:"dataset,omitempty" yaml:"dataset,omitempty" ecs:"event.dataset"`
	Duration      time.Duration `json:"duration,omitempty" yaml:"duration,omitempty" ecs:"event.duration"`
	End           time.Time     `json:"end,omitempty" yaml:"end,omitempty" ecs:"event.end"`
	Hash          string        `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"event.hash"`
	ID            string        `json:"id,omitempty" yaml:"id,omitempty" ecs:"event.id"`
	Ingested      time.Time     `json:"ingested,omitempty" yaml:"ingested,omitempty" ecs:"event.ingested"`
	Kind          string        `json:"kind,omitempty" yaml:"kind,omitempty" ecs:"event.kind"`
	Module        string        `json:"module,omitempty" yaml:"module,omitempty" ecs:"event.module"`
	Original      string        `json:"original,omitempty" yaml:"original,omitempty" ecs:"event.original"`
	Outcome       string        `json:"outcome,omitempty" yaml:"outcome,omitempty" ecs:"event.outcome"`
	Provider      string        `json:"provider,omitempty" yaml:"provider,omitempty" ecs:"event.provider"`
	Reference     string        `json:"reference,omitempty" yaml:"reference,omitempty" ecs:"event.reference"`
	RiskScore     float64       `json:"risk_score,omitempty" yaml:"risk_score,omitempty" ecs:"event.risk_score"`
	RiskScoreNorm float64       `json:"risk_score_norm,omitempty" yaml:"risk_score_norm,omitempty" ecs:"event.risk_score_norm"`
	Sequence      int64         `json:"sequence,omitempty" yaml:"sequence,omitempty" ecs:"event.sequence"`
	Severity      int64         `json:"severity,omitempty" yaml:"severity,omitempty" ecs:"event.severity"`
	Start         time.Time     `json:"start,omitempty" yaml:"start,omitempty" ecs:"event.start"`
	Timezone      string        `json:"timezone,omitempty" yaml:"timezone,omitempty" ecs:"event.timezone"`
	Type          string        `json:"type,omitempty" yaml:"type,omitempty" ecs:"event.type"`
	URL           string        `json:"url,omitempty" yaml:"url,omitempty" ecs:"event.url"`
}

// File defines the object located at ECS path file.
type File struct {
	Accessed      time.Time         `json:"accessed,omitempty" yaml:"accessed,omitempty" ecs:"file.accessed"`
	Attributes    string            `json:"attributes,omitempty" yaml:"attributes,omitempty" ecs:"file.attributes"`
	CodeSignature FileCodeSignature `json:"code_signature,omitempty" yaml:"code_signature,omitempty" ecs:"file.code_signature"`
	Created       time.Time         `json:"created,omitempty" yaml:"created,omitempty" ecs:"file.created"`
	Ctime         time.Time         `json:"ctime,omitempty" yaml:"ctime,omitempty" ecs:"file.ctime"`
	Device        string            `json:"device,omitempty" yaml:"device,omitempty" ecs:"file.device"`
	Directory     string            `json:"directory,omitempty" yaml:"directory,omitempty" ecs:"file.directory"`
	DriveLetter   string            `json:"drive_letter,omitempty" yaml:"drive_letter,omitempty" ecs:"file.drive_letter"`
	Extension     string            `json:"extension,omitempty" yaml:"extension,omitempty" ecs:"file.extension"`
	Gid           string            `json:"gid,omitempty" yaml:"gid,omitempty" ecs:"file.gid"`
	Group         string            `json:"group,omitempty" yaml:"group,omitempty" ecs:"file.group"`
	Hash          FileHash          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"file.hash"`
	Inode         string            `json:"inode,omitempty" yaml:"inode,omitempty" ecs:"file.inode"`
	MIMEType      string            `json:"mime_type,omitempty" yaml:"mime_type,omitempty" ecs:"file.mime_type"`
	Mode          string            `json:"mode,omitempty" yaml:"mode,omitempty" ecs:"file.mode"`
	Mtime         time.Time         `json:"mtime,omitempty" yaml:"mtime,omitempty" ecs:"file.mtime"`
	Name          string            `json:"name,omitempty" yaml:"name,omitempty" ecs:"file.name"`
	Owner         string            `json:"owner,omitempty" yaml:"owner,omitempty" ecs:"file.owner"`
	Path          string            `json:"path,omitempty" yaml:"path,omitempty" ecs:"file.path"`
	PE            FilePE            `json:"pe,omitempty" yaml:"pe,omitempty" ecs:"file.pe"`
	Size          int64             `json:"size,omitempty" yaml:"size,omitempty" ecs:"file.size"`
	TargetPath    string            `json:"target_path,omitempty" yaml:"target_path,omitempty" ecs:"file.target_path"`
	Type          string            `json:"type,omitempty" yaml:"type,omitempty" ecs:"file.type"`
	UID           string            `json:"uid,omitempty" yaml:"uid,omitempty" ecs:"file.uid"`
}

// FileCodeSignature defines the object located at ECS path file.code_signature.
type FileCodeSignature struct {
	Exists      bool   `json:"exists,omitempty" yaml:"exists,omitempty" ecs:"file.code_signature.exists"`
	Status      string `json:"status,omitempty" yaml:"status,omitempty" ecs:"file.code_signature.status"`
	SubjectName string `json:"subject_name,omitempty" yaml:"subject_name,omitempty" ecs:"file.code_signature.subject_name"`
	Trusted     bool   `json:"trusted,omitempty" yaml:"trusted,omitempty" ecs:"file.code_signature.trusted"`
	Valid       bool   `json:"valid,omitempty" yaml:"valid,omitempty" ecs:"file.code_signature.valid"`
}

// FileHash defines the object located at ECS path file.hash.
type FileHash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"file.hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"file.hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"file.hash.sha256"`
	SHA512 string `json:"sha512,omitempty" yaml:"sha512,omitempty" ecs:"file.hash.sha512"`
}

// FilePE defines the object located at ECS path file.pe.
type FilePE struct {
	Company          string `json:"company,omitempty" yaml:"company,omitempty" ecs:"file.pe.company"`
	Description      string `json:"description,omitempty" yaml:"description,omitempty" ecs:"file.pe.description"`
	FileVersion      string `json:"file_version,omitempty" yaml:"file_version,omitempty" ecs:"file.pe.file_version"`
	OriginalFileName string `json:"original_file_name,omitempty" yaml:"original_file_name,omitempty" ecs:"file.pe.original_file_name"`
	Product          string `json:"product,omitempty" yaml:"product,omitempty" ecs:"file.pe.product"`
}

// Geo defines the object located at ECS path geo.
type Geo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"geo.region_name"`
}

// Group defines the object located at ECS path group.
type Group struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"group.name"`
}

// Hash defines the object located at ECS path hash.
type Hash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"hash.sha256"`
	SHA512 string `json:"sha512,omitempty" yaml:"sha512,omitempty" ecs:"hash.sha512"`
}

// Host defines the object located at ECS path host.
type Host struct {
	Architecture string   `json:"architecture,omitempty" yaml:"architecture,omitempty" ecs:"host.architecture"`
	Domain       string   `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"host.domain"`
	Geo          HostGeo  `json:"geo,omitempty" yaml:"geo,omitempty" ecs:"host.geo"`
	Hostname     string   `json:"hostname,omitempty" yaml:"hostname,omitempty" ecs:"host.hostname"`
	ID           string   `json:"id,omitempty" yaml:"id,omitempty" ecs:"host.id"`
	IP           string   `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"host.ip"`
	MAC          string   `json:"mac,omitempty" yaml:"mac,omitempty" ecs:"host.mac"`
	Name         string   `json:"name,omitempty" yaml:"name,omitempty" ecs:"host.name"`
	OS           HostOS   `json:"os,omitempty" yaml:"os,omitempty" ecs:"host.os"`
	Type         string   `json:"type,omitempty" yaml:"type,omitempty" ecs:"host.type"`
	Uptime       int64    `json:"uptime,omitempty" yaml:"uptime,omitempty" ecs:"host.uptime"`
	User         HostUser `json:"user,omitempty" yaml:"user,omitempty" ecs:"host.user"`
}

// HostGeo defines the object located at ECS path host.geo.
type HostGeo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"host.geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"host.geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"host.geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"host.geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"host.geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"host.geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"host.geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"host.geo.region_name"`
}

// HostOS defines the object located at ECS path host.os.
type HostOS struct {
	Family   string `json:"family,omitempty" yaml:"family,omitempty" ecs:"host.os.family"`
	Full     string `json:"full,omitempty" yaml:"full,omitempty" ecs:"host.os.full"`
	Kernel   string `json:"kernel,omitempty" yaml:"kernel,omitempty" ecs:"host.os.kernel"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" ecs:"host.os.name"`
	Platform string `json:"platform,omitempty" yaml:"platform,omitempty" ecs:"host.os.platform"`
	Version  string `json:"version,omitempty" yaml:"version,omitempty" ecs:"host.os.version"`
}

// HostUser defines the object located at ECS path host.user.
type HostUser struct {
	Domain   string        `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"host.user.domain"`
	Email    string        `json:"email,omitempty" yaml:"email,omitempty" ecs:"host.user.email"`
	FullName string        `json:"full_name,omitempty" yaml:"full_name,omitempty" ecs:"host.user.full_name"`
	Group    HostUserGroup `json:"group,omitempty" yaml:"group,omitempty" ecs:"host.user.group"`
	Hash     string        `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"host.user.hash"`
	ID       string        `json:"id,omitempty" yaml:"id,omitempty" ecs:"host.user.id"`
	Name     string        `json:"name,omitempty" yaml:"name,omitempty" ecs:"host.user.name"`
}

// HostUserGroup defines the object located at ECS path host.user.group.
type HostUserGroup struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"host.user.group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"host.user.group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"host.user.group.name"`
}

// HTTP defines the object located at ECS path http.
type HTTP struct {
	Request  HTTPRequest  `json:"request,omitempty" yaml:"request,omitempty" ecs:"http.request"`
	Response HTTPResponse `json:"response,omitempty" yaml:"response,omitempty" ecs:"http.response"`
	Version  string       `json:"version,omitempty" yaml:"version,omitempty" ecs:"http.version"`
}

// HTTPRequest defines the object located at ECS path http.request.
type HTTPRequest struct {
	Body     HTTPRequestBody `json:"body,omitempty" yaml:"body,omitempty" ecs:"http.request.body"`
	Bytes    int64           `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"http.request.bytes"`
	Method   string          `json:"method,omitempty" yaml:"method,omitempty" ecs:"http.request.method"`
	Referrer string          `json:"referrer,omitempty" yaml:"referrer,omitempty" ecs:"http.request.referrer"`
}

// HTTPRequestBody defines the object located at ECS path http.request.body.
type HTTPRequestBody struct {
	Bytes   int64  `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"http.request.body.bytes"`
	Content string `json:"content,omitempty" yaml:"content,omitempty" ecs:"http.request.body.content"`
}

// HTTPResponse defines the object located at ECS path http.response.
type HTTPResponse struct {
	Body       HTTPResponseBody `json:"body,omitempty" yaml:"body,omitempty" ecs:"http.response.body"`
	Bytes      int64            `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"http.response.bytes"`
	StatusCode int64            `json:"status_code,omitempty" yaml:"status_code,omitempty" ecs:"http.response.status_code"`
}

// HTTPResponseBody defines the object located at ECS path http.response.body.
type HTTPResponseBody struct {
	Bytes   int64  `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"http.response.body.bytes"`
	Content string `json:"content,omitempty" yaml:"content,omitempty" ecs:"http.response.body.content"`
}

// Interface defines the object located at ECS path interface.
type Interface struct {
	Alias string `json:"alias,omitempty" yaml:"alias,omitempty" ecs:"interface.alias"`
	ID    string `json:"id,omitempty" yaml:"id,omitempty" ecs:"interface.id"`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" ecs:"interface.name"`
}

// Log defines the object located at ECS path log.
type Log struct {
	File     LogFile   `json:"file,omitempty" yaml:"file,omitempty" ecs:"log.file"`
	Level    string    `json:"level,omitempty" yaml:"level,omitempty" ecs:"log.level"`
	Logger   string    `json:"logger,omitempty" yaml:"logger,omitempty" ecs:"log.logger"`
	Origin   LogOrigin `json:"origin,omitempty" yaml:"origin,omitempty" ecs:"log.origin"`
	Original string    `json:"original,omitempty" yaml:"original,omitempty" ecs:"log.original"`
	Syslog   LogSyslog `json:"syslog,omitempty" yaml:"syslog,omitempty" ecs:"log.syslog"`
}

// LogFile defines the object located at ECS path log.file.
type LogFile struct {
	Path string `json:"path,omitempty" yaml:"path,omitempty" ecs:"log.file.path"`
}

// LogOrigin defines the object located at ECS path log.origin.
type LogOrigin struct {
	File     LogOriginFile `json:"file,omitempty" yaml:"file,omitempty" ecs:"log.origin.file"`
	Function string        `json:"function,omitempty" yaml:"function,omitempty" ecs:"log.origin.function"`
}

// LogOriginFile defines the object located at ECS path log.origin.file.
type LogOriginFile struct {
	Line int32  `json:"line,omitempty" yaml:"line,omitempty" ecs:"log.origin.file.line"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"log.origin.file.name"`
}

// LogSyslog defines the object located at ECS path log.syslog.
type LogSyslog struct {
	Facility LogSyslogFacility `json:"facility,omitempty" yaml:"facility,omitempty" ecs:"log.syslog.facility"`
	Priority int64             `json:"priority,omitempty" yaml:"priority,omitempty" ecs:"log.syslog.priority"`
	Severity LogSyslogSeverity `json:"severity,omitempty" yaml:"severity,omitempty" ecs:"log.syslog.severity"`
}

// LogSyslogFacility defines the object located at ECS path log.syslog.facility.
type LogSyslogFacility struct {
	Code int64  `json:"code,omitempty" yaml:"code,omitempty" ecs:"log.syslog.facility.code"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"log.syslog.facility.name"`
}

// LogSyslogSeverity defines the object located at ECS path log.syslog.severity.
type LogSyslogSeverity struct {
	Code int64  `json:"code,omitempty" yaml:"code,omitempty" ecs:"log.syslog.severity.code"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"log.syslog.severity.name"`
}

// Network defines the object located at ECS path network.
type Network struct {
	Application string       `json:"application,omitempty" yaml:"application,omitempty" ecs:"network.application"`
	Bytes       int64        `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"network.bytes"`
	CommunityID string       `json:"community_id,omitempty" yaml:"community_id,omitempty" ecs:"network.community_id"`
	Direction   string       `json:"direction,omitempty" yaml:"direction,omitempty" ecs:"network.direction"`
	ForwardedIP string       `json:"forwarded_ip,omitempty" yaml:"forwarded_ip,omitempty" ecs:"network.forwarded_ip"`
	IANANumber  string       `json:"iana_number,omitempty" yaml:"iana_number,omitempty" ecs:"network.iana_number"`
	Inner       NetworkInner `json:"inner,omitempty" yaml:"inner,omitempty" ecs:"network.inner"`
	Name        string       `json:"name,omitempty" yaml:"name,omitempty" ecs:"network.name"`
	Packets     int64        `json:"packets,omitempty" yaml:"packets,omitempty" ecs:"network.packets"`
	Protocol    string       `json:"protocol,omitempty" yaml:"protocol,omitempty" ecs:"network.protocol"`
	Transport   string       `json:"transport,omitempty" yaml:"transport,omitempty" ecs:"network.transport"`
	Type        string       `json:"type,omitempty" yaml:"type,omitempty" ecs:"network.type"`
	VLAN        NetworkVLAN  `json:"vlan,omitempty" yaml:"vlan,omitempty" ecs:"network.vlan"`
}

// NetworkInner defines the object located at ECS path network.inner.
type NetworkInner struct {
	VLAN NetworkInnerVLAN `json:"vlan,omitempty" yaml:"vlan,omitempty" ecs:"network.inner.vlan"`
}

// NetworkInnerVLAN defines the object located at ECS path network.inner.vlan.
type NetworkInnerVLAN struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"network.inner.vlan.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"network.inner.vlan.name"`
}

// NetworkVLAN defines the object located at ECS path network.vlan.
type NetworkVLAN struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"network.vlan.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"network.vlan.name"`
}

// Observer defines the object located at ECS path observer.
type Observer struct {
	Egress       ObserverEgress  `json:"egress,omitempty" yaml:"egress,omitempty" ecs:"observer.egress"`
	Geo          ObserverGeo     `json:"geo,omitempty" yaml:"geo,omitempty" ecs:"observer.geo"`
	Hostname     string          `json:"hostname,omitempty" yaml:"hostname,omitempty" ecs:"observer.hostname"`
	Ingress      ObserverIngress `json:"ingress,omitempty" yaml:"ingress,omitempty" ecs:"observer.ingress"`
	IP           string          `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"observer.ip"`
	MAC          string          `json:"mac,omitempty" yaml:"mac,omitempty" ecs:"observer.mac"`
	Name         string          `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.name"`
	OS           ObserverOS      `json:"os,omitempty" yaml:"os,omitempty" ecs:"observer.os"`
	Product      string          `json:"product,omitempty" yaml:"product,omitempty" ecs:"observer.product"`
	SerialNumber string          `json:"serial_number,omitempty" yaml:"serial_number,omitempty" ecs:"observer.serial_number"`
	Type         string          `json:"type,omitempty" yaml:"type,omitempty" ecs:"observer.type"`
	Vendor       string          `json:"vendor,omitempty" yaml:"vendor,omitempty" ecs:"observer.vendor"`
	Version      string          `json:"version,omitempty" yaml:"version,omitempty" ecs:"observer.version"`
}

// ObserverEgress defines the object located at ECS path observer.egress.
type ObserverEgress struct {
	Interface ObserverEgressInterface `json:"interface,omitempty" yaml:"interface,omitempty" ecs:"observer.egress.interface"`
	VLAN      ObserverEgressVLAN      `json:"vlan,omitempty" yaml:"vlan,omitempty" ecs:"observer.egress.vlan"`
	Zone      string                  `json:"zone,omitempty" yaml:"zone,omitempty" ecs:"observer.egress.zone"`
}

// ObserverEgressInterface defines the object located at ECS path observer.egress.interface.
type ObserverEgressInterface struct {
	Alias string `json:"alias,omitempty" yaml:"alias,omitempty" ecs:"observer.egress.interface.alias"`
	ID    string `json:"id,omitempty" yaml:"id,omitempty" ecs:"observer.egress.interface.id"`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.egress.interface.name"`
}

// ObserverEgressVLAN defines the object located at ECS path observer.egress.vlan.
type ObserverEgressVLAN struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"observer.egress.vlan.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.egress.vlan.name"`
}

// ObserverGeo defines the object located at ECS path observer.geo.
type ObserverGeo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"observer.geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"observer.geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"observer.geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"observer.geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"observer.geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"observer.geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"observer.geo.region_name"`
}

// ObserverIngress defines the object located at ECS path observer.ingress.
type ObserverIngress struct {
	Interface ObserverIngressInterface `json:"interface,omitempty" yaml:"interface,omitempty" ecs:"observer.ingress.interface"`
	VLAN      ObserverIngressVLAN      `json:"vlan,omitempty" yaml:"vlan,omitempty" ecs:"observer.ingress.vlan"`
	Zone      string                   `json:"zone,omitempty" yaml:"zone,omitempty" ecs:"observer.ingress.zone"`
}

// ObserverIngressInterface defines the object located at ECS path observer.ingress.interface.
type ObserverIngressInterface struct {
	Alias string `json:"alias,omitempty" yaml:"alias,omitempty" ecs:"observer.ingress.interface.alias"`
	ID    string `json:"id,omitempty" yaml:"id,omitempty" ecs:"observer.ingress.interface.id"`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.ingress.interface.name"`
}

// ObserverIngressVLAN defines the object located at ECS path observer.ingress.vlan.
type ObserverIngressVLAN struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"observer.ingress.vlan.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.ingress.vlan.name"`
}

// ObserverOS defines the object located at ECS path observer.os.
type ObserverOS struct {
	Family   string `json:"family,omitempty" yaml:"family,omitempty" ecs:"observer.os.family"`
	Full     string `json:"full,omitempty" yaml:"full,omitempty" ecs:"observer.os.full"`
	Kernel   string `json:"kernel,omitempty" yaml:"kernel,omitempty" ecs:"observer.os.kernel"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" ecs:"observer.os.name"`
	Platform string `json:"platform,omitempty" yaml:"platform,omitempty" ecs:"observer.os.platform"`
	Version  string `json:"version,omitempty" yaml:"version,omitempty" ecs:"observer.os.version"`
}

// Organization defines the object located at ECS path organization.
type Organization struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"organization.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"organization.name"`
}

// OS defines the object located at ECS path os.
type OS struct {
	Family   string `json:"family,omitempty" yaml:"family,omitempty" ecs:"os.family"`
	Full     string `json:"full,omitempty" yaml:"full,omitempty" ecs:"os.full"`
	Kernel   string `json:"kernel,omitempty" yaml:"kernel,omitempty" ecs:"os.kernel"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" ecs:"os.name"`
	Platform string `json:"platform,omitempty" yaml:"platform,omitempty" ecs:"os.platform"`
	Version  string `json:"version,omitempty" yaml:"version,omitempty" ecs:"os.version"`
}

// Package defines the object located at ECS path package.
type Package struct {
	Architecture string    `json:"architecture,omitempty" yaml:"architecture,omitempty" ecs:"package.architecture"`
	BuildVersion string    `json:"build_version,omitempty" yaml:"build_version,omitempty" ecs:"package.build_version"`
	Checksum     string    `json:"checksum,omitempty" yaml:"checksum,omitempty" ecs:"package.checksum"`
	Description  string    `json:"description,omitempty" yaml:"description,omitempty" ecs:"package.description"`
	InstallScope string    `json:"install_scope,omitempty" yaml:"install_scope,omitempty" ecs:"package.install_scope"`
	Installed    time.Time `json:"installed,omitempty" yaml:"installed,omitempty" ecs:"package.installed"`
	License      string    `json:"license,omitempty" yaml:"license,omitempty" ecs:"package.license"`
	Name         string    `json:"name,omitempty" yaml:"name,omitempty" ecs:"package.name"`
	Path         string    `json:"path,omitempty" yaml:"path,omitempty" ecs:"package.path"`
	Reference    string    `json:"reference,omitempty" yaml:"reference,omitempty" ecs:"package.reference"`
	Size         int64     `json:"size,omitempty" yaml:"size,omitempty" ecs:"package.size"`
	Type         string    `json:"type,omitempty" yaml:"type,omitempty" ecs:"package.type"`
	Version      string    `json:"version,omitempty" yaml:"version,omitempty" ecs:"package.version"`
}

// PE defines the object located at ECS path pe.
type PE struct {
	Company          string `json:"company,omitempty" yaml:"company,omitempty" ecs:"pe.company"`
	Description      string `json:"description,omitempty" yaml:"description,omitempty" ecs:"pe.description"`
	FileVersion      string `json:"file_version,omitempty" yaml:"file_version,omitempty" ecs:"pe.file_version"`
	OriginalFileName string `json:"original_file_name,omitempty" yaml:"original_file_name,omitempty" ecs:"pe.original_file_name"`
	Product          string `json:"product,omitempty" yaml:"product,omitempty" ecs:"pe.product"`
}

// Process defines the object located at ECS path process.
type Process struct {
	Args             []string             `json:"args,omitempty" yaml:"args,omitempty" ecs:"process.args"`
	ArgsCount        int64                `json:"args_count,omitempty" yaml:"args_count,omitempty" ecs:"process.args_count"`
	CodeSignature    ProcessCodeSignature `json:"code_signature,omitempty" yaml:"code_signature,omitempty" ecs:"process.code_signature"`
	CommandLine      string               `json:"command_line,omitempty" yaml:"command_line,omitempty" ecs:"process.command_line"`
	EntityID         string               `json:"entity_id,omitempty" yaml:"entity_id,omitempty" ecs:"process.entity_id"`
	Executable       string               `json:"executable,omitempty" yaml:"executable,omitempty" ecs:"process.executable"`
	ExitCode         int64                `json:"exit_code,omitempty" yaml:"exit_code,omitempty" ecs:"process.exit_code"`
	Hash             ProcessHash          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"process.hash"`
	Name             string               `json:"name,omitempty" yaml:"name,omitempty" ecs:"process.name"`
	Parent           ProcessParent        `json:"parent,omitempty" yaml:"parent,omitempty" ecs:"process.parent"`
	PE               ProcessPE            `json:"pe,omitempty" yaml:"pe,omitempty" ecs:"process.pe"`
	PGID             int64                `json:"pgid,omitempty" yaml:"pgid,omitempty" ecs:"process.pgid"`
	PID              int64                `json:"pid,omitempty" yaml:"pid,omitempty" ecs:"process.pid"`
	PPID             int64                `json:"ppid,omitempty" yaml:"ppid,omitempty" ecs:"process.ppid"`
	Start            time.Time            `json:"start,omitempty" yaml:"start,omitempty" ecs:"process.start"`
	Thread           ProcessThread        `json:"thread,omitempty" yaml:"thread,omitempty" ecs:"process.thread"`
	Title            string               `json:"title,omitempty" yaml:"title,omitempty" ecs:"process.title"`
	Uptime           int64                `json:"uptime,omitempty" yaml:"uptime,omitempty" ecs:"process.uptime"`
	WorkingDirectory string               `json:"working_directory,omitempty" yaml:"working_directory,omitempty" ecs:"process.working_directory"`
}

// ProcessCodeSignature defines the object located at ECS path process.code_signature.
type ProcessCodeSignature struct {
	Exists      bool   `json:"exists,omitempty" yaml:"exists,omitempty" ecs:"process.code_signature.exists"`
	Status      string `json:"status,omitempty" yaml:"status,omitempty" ecs:"process.code_signature.status"`
	SubjectName string `json:"subject_name,omitempty" yaml:"subject_name,omitempty" ecs:"process.code_signature.subject_name"`
	Trusted     bool   `json:"trusted,omitempty" yaml:"trusted,omitempty" ecs:"process.code_signature.trusted"`
	Valid       bool   `json:"valid,omitempty" yaml:"valid,omitempty" ecs:"process.code_signature.valid"`
}

// ProcessHash defines the object located at ECS path process.hash.
type ProcessHash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"process.hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"process.hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"process.hash.sha256"`
	SHA512 string `json:"sha512,omitempty" yaml:"sha512,omitempty" ecs:"process.hash.sha512"`
}

// ProcessParent defines the object located at ECS path process.parent.
type ProcessParent struct {
	Args             []string                   `json:"args,omitempty" yaml:"args,omitempty" ecs:"process.parent.args"`
	ArgsCount        int64                      `json:"args_count,omitempty" yaml:"args_count,omitempty" ecs:"process.parent.args_count"`
	CodeSignature    ProcessParentCodeSignature `json:"code_signature,omitempty" yaml:"code_signature,omitempty" ecs:"process.parent.code_signature"`
	CommandLine      string                     `json:"command_line,omitempty" yaml:"command_line,omitempty" ecs:"process.parent.command_line"`
	EntityID         string                     `json:"entity_id,omitempty" yaml:"entity_id,omitempty" ecs:"process.parent.entity_id"`
	Executable       string                     `json:"executable,omitempty" yaml:"executable,omitempty" ecs:"process.parent.executable"`
	ExitCode         int64                      `json:"exit_code,omitempty" yaml:"exit_code,omitempty" ecs:"process.parent.exit_code"`
	Hash             ProcessParentHash          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"process.parent.hash"`
	Name             string                     `json:"name,omitempty" yaml:"name,omitempty" ecs:"process.parent.name"`
	PGID             int64                      `json:"pgid,omitempty" yaml:"pgid,omitempty" ecs:"process.parent.pgid"`
	PID              int64                      `json:"pid,omitempty" yaml:"pid,omitempty" ecs:"process.parent.pid"`
	PPID             int64                      `json:"ppid,omitempty" yaml:"ppid,omitempty" ecs:"process.parent.ppid"`
	Start            time.Time                  `json:"start,omitempty" yaml:"start,omitempty" ecs:"process.parent.start"`
	Thread           ProcessParentThread        `json:"thread,omitempty" yaml:"thread,omitempty" ecs:"process.parent.thread"`
	Title            string                     `json:"title,omitempty" yaml:"title,omitempty" ecs:"process.parent.title"`
	Uptime           int64                      `json:"uptime,omitempty" yaml:"uptime,omitempty" ecs:"process.parent.uptime"`
	WorkingDirectory string                     `json:"working_directory,omitempty" yaml:"working_directory,omitempty" ecs:"process.parent.working_directory"`
}

// ProcessParentCodeSignature defines the object located at ECS path process.parent.code_signature.
type ProcessParentCodeSignature struct {
	Exists      bool   `json:"exists,omitempty" yaml:"exists,omitempty" ecs:"process.parent.code_signature.exists"`
	Status      string `json:"status,omitempty" yaml:"status,omitempty" ecs:"process.parent.code_signature.status"`
	SubjectName string `json:"subject_name,omitempty" yaml:"subject_name,omitempty" ecs:"process.parent.code_signature.subject_name"`
	Trusted     bool   `json:"trusted,omitempty" yaml:"trusted,omitempty" ecs:"process.parent.code_signature.trusted"`
	Valid       bool   `json:"valid,omitempty" yaml:"valid,omitempty" ecs:"process.parent.code_signature.valid"`
}

// ProcessParentHash defines the object located at ECS path process.parent.hash.
type ProcessParentHash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"process.parent.hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"process.parent.hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"process.parent.hash.sha256"`
	SHA512 string `json:"sha512,omitempty" yaml:"sha512,omitempty" ecs:"process.parent.hash.sha512"`
}

// ProcessParentThread defines the object located at ECS path process.parent.thread.
type ProcessParentThread struct {
	ID   int64  `json:"id,omitempty" yaml:"id,omitempty" ecs:"process.parent.thread.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"process.parent.thread.name"`
}

// ProcessPE defines the object located at ECS path process.pe.
type ProcessPE struct {
	Company          string `json:"company,omitempty" yaml:"company,omitempty" ecs:"process.pe.company"`
	Description      string `json:"description,omitempty" yaml:"description,omitempty" ecs:"process.pe.description"`
	FileVersion      string `json:"file_version,omitempty" yaml:"file_version,omitempty" ecs:"process.pe.file_version"`
	OriginalFileName string `json:"original_file_name,omitempty" yaml:"original_file_name,omitempty" ecs:"process.pe.original_file_name"`
	Product          string `json:"product,omitempty" yaml:"product,omitempty" ecs:"process.pe.product"`
}

// ProcessThread defines the object located at ECS path process.thread.
type ProcessThread struct {
	ID   int64  `json:"id,omitempty" yaml:"id,omitempty" ecs:"process.thread.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"process.thread.name"`
}

// Registry defines the object located at ECS path registry.
type Registry struct {
	Data  RegistryData `json:"data,omitempty" yaml:"data,omitempty" ecs:"registry.data"`
	Hive  string       `json:"hive,omitempty" yaml:"hive,omitempty" ecs:"registry.hive"`
	Key   string       `json:"key,omitempty" yaml:"key,omitempty" ecs:"registry.key"`
	Path  string       `json:"path,omitempty" yaml:"path,omitempty" ecs:"registry.path"`
	Value string       `json:"value,omitempty" yaml:"value,omitempty" ecs:"registry.value"`
}

// RegistryData defines the object located at ECS path registry.data.
type RegistryData struct {
	Bytes   string `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"registry.data.bytes"`
	Strings string `json:"strings,omitempty" yaml:"strings,omitempty" ecs:"registry.data.strings"`
	Type    string `json:"type,omitempty" yaml:"type,omitempty" ecs:"registry.data.type"`
}

// Related defines the object located at ECS path related.
type Related struct {
	Hash string `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"related.hash"`
	IP   string `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"related.ip"`
	User string `json:"user,omitempty" yaml:"user,omitempty" ecs:"related.user"`
}

// Rule defines the object located at ECS path rule.
type Rule struct {
	Author      string `json:"author,omitempty" yaml:"author,omitempty" ecs:"rule.author"`
	Category    string `json:"category,omitempty" yaml:"category,omitempty" ecs:"rule.category"`
	Description string `json:"description,omitempty" yaml:"description,omitempty" ecs:"rule.description"`
	ID          string `json:"id,omitempty" yaml:"id,omitempty" ecs:"rule.id"`
	License     string `json:"license,omitempty" yaml:"license,omitempty" ecs:"rule.license"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty" ecs:"rule.name"`
	Reference   string `json:"reference,omitempty" yaml:"reference,omitempty" ecs:"rule.reference"`
	Ruleset     string `json:"ruleset,omitempty" yaml:"ruleset,omitempty" ecs:"rule.ruleset"`
	UUID        string `json:"uuid,omitempty" yaml:"uuid,omitempty" ecs:"rule.uuid"`
	Version     string `json:"version,omitempty" yaml:"version,omitempty" ecs:"rule.version"`
}

// Search defines the object located at ECS path search.
type Search struct {
	Query   SearchQuery   `json:"query,omitempty" yaml:"query,omitempty" ecs:"search.query"`
	Results SearchResults `json:"results,omitempty" yaml:"results,omitempty" ecs:"search.results"`
}

// SearchQuery defines the object located at ECS path search.query.
type SearchQuery struct {
	ID    string `json:"id,omitempty" yaml:"id,omitempty" ecs:"search.query.id"`
	Page  int64  `json:"page,omitempty" yaml:"page,omitempty" ecs:"search.query.page"`
	Value string `json:"value,omitempty" yaml:"value,omitempty" ecs:"search.query.value"`
}

// SearchResults defines the object located at ECS path search.results.
type SearchResults struct {
	Ids   string `json:"ids,omitempty" yaml:"ids,omitempty" ecs:"search.results.ids"`
	Size  int64  `json:"size,omitempty" yaml:"size,omitempty" ecs:"search.results.size"`
	Total int64  `json:"total,omitempty" yaml:"total,omitempty" ecs:"search.results.total"`
}

// Server defines the object located at ECS path server.
type Server struct {
	Address          string     `json:"address,omitempty" yaml:"address,omitempty" ecs:"server.address"`
	AS               ServerAS   `json:"as,omitempty" yaml:"as,omitempty" ecs:"server.as"`
	Bytes            int64      `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"server.bytes"`
	Domain           string     `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"server.domain"`
	Geo              ServerGeo  `json:"geo,omitempty" yaml:"geo,omitempty" ecs:"server.geo"`
	IP               string     `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"server.ip"`
	MAC              string     `json:"mac,omitempty" yaml:"mac,omitempty" ecs:"server.mac"`
	NAT              ServerNAT  `json:"nat,omitempty" yaml:"nat,omitempty" ecs:"server.nat"`
	Packets          int64      `json:"packets,omitempty" yaml:"packets,omitempty" ecs:"server.packets"`
	Port             int64      `json:"port,omitempty" yaml:"port,omitempty" ecs:"server.port"`
	RegisteredDomain string     `json:"registered_domain,omitempty" yaml:"registered_domain,omitempty" ecs:"server.registered_domain"`
	TopLevelDomain   string     `json:"top_level_domain,omitempty" yaml:"top_level_domain,omitempty" ecs:"server.top_level_domain"`
	User             ServerUser `json:"user,omitempty" yaml:"user,omitempty" ecs:"server.user"`
}

// ServerAS defines the object located at ECS path server.as.
type ServerAS struct {
	Number       int64                `json:"number,omitempty" yaml:"number,omitempty" ecs:"server.as.number"`
	Organization ServerASOrganization `json:"organization,omitempty" yaml:"organization,omitempty" ecs:"server.as.organization"`
}

// ServerASOrganization defines the object located at ECS path server.as.organization.
type ServerASOrganization struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"server.as.organization.name"`
}

// ServerGeo defines the object located at ECS path server.geo.
type ServerGeo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"server.geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"server.geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"server.geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"server.geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"server.geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"server.geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"server.geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"server.geo.region_name"`
}

// ServerNAT defines the object located at ECS path server.nat.
type ServerNAT struct {
	IP   string `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"server.nat.ip"`
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" ecs:"server.nat.port"`
}

// ServerUser defines the object located at ECS path server.user.
type ServerUser struct {
	Domain   string          `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"server.user.domain"`
	Email    string          `json:"email,omitempty" yaml:"email,omitempty" ecs:"server.user.email"`
	FullName string          `json:"full_name,omitempty" yaml:"full_name,omitempty" ecs:"server.user.full_name"`
	Group    ServerUserGroup `json:"group,omitempty" yaml:"group,omitempty" ecs:"server.user.group"`
	Hash     string          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"server.user.hash"`
	ID       string          `json:"id,omitempty" yaml:"id,omitempty" ecs:"server.user.id"`
	Name     string          `json:"name,omitempty" yaml:"name,omitempty" ecs:"server.user.name"`
}

// ServerUserGroup defines the object located at ECS path server.user.group.
type ServerUserGroup struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"server.user.group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"server.user.group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"server.user.group.name"`
}

// Service defines the object located at ECS path service.
type Service struct {
	EphemeralID string      `json:"ephemeral_id,omitempty" yaml:"ephemeral_id,omitempty" ecs:"service.ephemeral_id"`
	ID          string      `json:"id,omitempty" yaml:"id,omitempty" ecs:"service.id"`
	Name        string      `json:"name,omitempty" yaml:"name,omitempty" ecs:"service.name"`
	Node        ServiceNode `json:"node,omitempty" yaml:"node,omitempty" ecs:"service.node"`
	State       string      `json:"state,omitempty" yaml:"state,omitempty" ecs:"service.state"`
	Type        string      `json:"type,omitempty" yaml:"type,omitempty" ecs:"service.type"`
	Version     string      `json:"version,omitempty" yaml:"version,omitempty" ecs:"service.version"`
}

// ServiceNode defines the object located at ECS path service.node.
type ServiceNode struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"service.node.name"`
}

// Source defines the object located at ECS path source.
type Source struct {
	Address          string     `json:"address,omitempty" yaml:"address,omitempty" ecs:"source.address"`
	AS               SourceAS   `json:"as,omitempty" yaml:"as,omitempty" ecs:"source.as"`
	Bytes            int64      `json:"bytes,omitempty" yaml:"bytes,omitempty" ecs:"source.bytes"`
	Domain           string     `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"source.domain"`
	Geo              SourceGeo  `json:"geo,omitempty" yaml:"geo,omitempty" ecs:"source.geo"`
	IP               string     `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"source.ip"`
	MAC              string     `json:"mac,omitempty" yaml:"mac,omitempty" ecs:"source.mac"`
	NAT              SourceNAT  `json:"nat,omitempty" yaml:"nat,omitempty" ecs:"source.nat"`
	Packets          int64      `json:"packets,omitempty" yaml:"packets,omitempty" ecs:"source.packets"`
	Port             int64      `json:"port,omitempty" yaml:"port,omitempty" ecs:"source.port"`
	RegisteredDomain string     `json:"registered_domain,omitempty" yaml:"registered_domain,omitempty" ecs:"source.registered_domain"`
	TopLevelDomain   string     `json:"top_level_domain,omitempty" yaml:"top_level_domain,omitempty" ecs:"source.top_level_domain"`
	User             SourceUser `json:"user,omitempty" yaml:"user,omitempty" ecs:"source.user"`
}

// SourceAS defines the object located at ECS path source.as.
type SourceAS struct {
	Number       int64                `json:"number,omitempty" yaml:"number,omitempty" ecs:"source.as.number"`
	Organization SourceASOrganization `json:"organization,omitempty" yaml:"organization,omitempty" ecs:"source.as.organization"`
}

// SourceASOrganization defines the object located at ECS path source.as.organization.
type SourceASOrganization struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"source.as.organization.name"`
}

// SourceGeo defines the object located at ECS path source.geo.
type SourceGeo struct {
	CityName       string `json:"city_name,omitempty" yaml:"city_name,omitempty" ecs:"source.geo.city_name"`
	ContinentName  string `json:"continent_name,omitempty" yaml:"continent_name,omitempty" ecs:"source.geo.continent_name"`
	CountryISOCode string `json:"country_iso_code,omitempty" yaml:"country_iso_code,omitempty" ecs:"source.geo.country_iso_code"`
	CountryName    string `json:"country_name,omitempty" yaml:"country_name,omitempty" ecs:"source.geo.country_name"`
	Location       string `json:"location,omitempty" yaml:"location,omitempty" ecs:"source.geo.location"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" ecs:"source.geo.name"`
	RegionISOCode  string `json:"region_iso_code,omitempty" yaml:"region_iso_code,omitempty" ecs:"source.geo.region_iso_code"`
	RegionName     string `json:"region_name,omitempty" yaml:"region_name,omitempty" ecs:"source.geo.region_name"`
}

// SourceNAT defines the object located at ECS path source.nat.
type SourceNAT struct {
	IP   string `json:"ip,omitempty" yaml:"ip,omitempty" ecs:"source.nat.ip"`
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" ecs:"source.nat.port"`
}

// SourceUser defines the object located at ECS path source.user.
type SourceUser struct {
	Domain   string          `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"source.user.domain"`
	Email    string          `json:"email,omitempty" yaml:"email,omitempty" ecs:"source.user.email"`
	FullName string          `json:"full_name,omitempty" yaml:"full_name,omitempty" ecs:"source.user.full_name"`
	Group    SourceUserGroup `json:"group,omitempty" yaml:"group,omitempty" ecs:"source.user.group"`
	Hash     string          `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"source.user.hash"`
	ID       string          `json:"id,omitempty" yaml:"id,omitempty" ecs:"source.user.id"`
	Name     string          `json:"name,omitempty" yaml:"name,omitempty" ecs:"source.user.name"`
}

// SourceUserGroup defines the object located at ECS path source.user.group.
type SourceUserGroup struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"source.user.group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"source.user.group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"source.user.group.name"`
}

// Threat defines the object located at ECS path threat.
type Threat struct {
	Framework string          `json:"framework,omitempty" yaml:"framework,omitempty" ecs:"threat.framework"`
	Tactic    ThreatTactic    `json:"tactic,omitempty" yaml:"tactic,omitempty" ecs:"threat.tactic"`
	Technique ThreatTechnique `json:"technique,omitempty" yaml:"technique,omitempty" ecs:"threat.technique"`
}

// ThreatTactic defines the object located at ECS path threat.tactic.
type ThreatTactic struct {
	ID        string `json:"id,omitempty" yaml:"id,omitempty" ecs:"threat.tactic.id"`
	Name      string `json:"name,omitempty" yaml:"name,omitempty" ecs:"threat.tactic.name"`
	Reference string `json:"reference,omitempty" yaml:"reference,omitempty" ecs:"threat.tactic.reference"`
}

// ThreatTechnique defines the object located at ECS path threat.technique.
type ThreatTechnique struct {
	ID        string `json:"id,omitempty" yaml:"id,omitempty" ecs:"threat.technique.id"`
	Name      string `json:"name,omitempty" yaml:"name,omitempty" ecs:"threat.technique.name"`
	Reference string `json:"reference,omitempty" yaml:"reference,omitempty" ecs:"threat.technique.reference"`
}

// TLS defines the object located at ECS path tls.
type TLS struct {
	Cipher          string    `json:"cipher,omitempty" yaml:"cipher,omitempty" ecs:"tls.cipher"`
	Client          TLSClient `json:"client,omitempty" yaml:"client,omitempty" ecs:"tls.client"`
	Curve           string    `json:"curve,omitempty" yaml:"curve,omitempty" ecs:"tls.curve"`
	Established     bool      `json:"established,omitempty" yaml:"established,omitempty" ecs:"tls.established"`
	NextProtocol    string    `json:"next_protocol,omitempty" yaml:"next_protocol,omitempty" ecs:"tls.next_protocol"`
	Resumed         bool      `json:"resumed,omitempty" yaml:"resumed,omitempty" ecs:"tls.resumed"`
	Server          TLSServer `json:"server,omitempty" yaml:"server,omitempty" ecs:"tls.server"`
	Version         string    `json:"version,omitempty" yaml:"version,omitempty" ecs:"tls.version"`
	VersionProtocol string    `json:"version_protocol,omitempty" yaml:"version_protocol,omitempty" ecs:"tls.version_protocol"`
}

// TLSClient defines the object located at ECS path tls.client.
type TLSClient struct {
	Certificate      string        `json:"certificate,omitempty" yaml:"certificate,omitempty" ecs:"tls.client.certificate"`
	CertificateChain string        `json:"certificate_chain,omitempty" yaml:"certificate_chain,omitempty" ecs:"tls.client.certificate_chain"`
	Hash             TLSClientHash `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"tls.client.hash"`
	Issuer           string        `json:"issuer,omitempty" yaml:"issuer,omitempty" ecs:"tls.client.issuer"`
	JA3              string        `json:"ja3,omitempty" yaml:"ja3,omitempty" ecs:"tls.client.ja3"`
	NotAfter         time.Time     `json:"not_after,omitempty" yaml:"not_after,omitempty" ecs:"tls.client.not_after"`
	NotBefore        time.Time     `json:"not_before,omitempty" yaml:"not_before,omitempty" ecs:"tls.client.not_before"`
	ServerName       string        `json:"server_name,omitempty" yaml:"server_name,omitempty" ecs:"tls.client.server_name"`
	Subject          string        `json:"subject,omitempty" yaml:"subject,omitempty" ecs:"tls.client.subject"`
	SupportedCiphers string        `json:"supported_ciphers,omitempty" yaml:"supported_ciphers,omitempty" ecs:"tls.client.supported_ciphers"`
}

// TLSClientHash defines the object located at ECS path tls.client.hash.
type TLSClientHash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"tls.client.hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"tls.client.hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"tls.client.hash.sha256"`
}

// TLSServer defines the object located at ECS path tls.server.
type TLSServer struct {
	Certificate      string        `json:"certificate,omitempty" yaml:"certificate,omitempty" ecs:"tls.server.certificate"`
	CertificateChain string        `json:"certificate_chain,omitempty" yaml:"certificate_chain,omitempty" ecs:"tls.server.certificate_chain"`
	Hash             TLSServerHash `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"tls.server.hash"`
	Issuer           string        `json:"issuer,omitempty" yaml:"issuer,omitempty" ecs:"tls.server.issuer"`
	JA3S             string        `json:"ja3s,omitempty" yaml:"ja3s,omitempty" ecs:"tls.server.ja3s"`
	NotAfter         time.Time     `json:"not_after,omitempty" yaml:"not_after,omitempty" ecs:"tls.server.not_after"`
	NotBefore        time.Time     `json:"not_before,omitempty" yaml:"not_before,omitempty" ecs:"tls.server.not_before"`
	Subject          string        `json:"subject,omitempty" yaml:"subject,omitempty" ecs:"tls.server.subject"`
}

// TLSServerHash defines the object located at ECS path tls.server.hash.
type TLSServerHash struct {
	MD5    string `json:"md5,omitempty" yaml:"md5,omitempty" ecs:"tls.server.hash.md5"`
	SHA1   string `json:"sha1,omitempty" yaml:"sha1,omitempty" ecs:"tls.server.hash.sha1"`
	SHA256 string `json:"sha256,omitempty" yaml:"sha256,omitempty" ecs:"tls.server.hash.sha256"`
}

// Trace defines the object located at ECS path trace.
type Trace struct {
	ID string `json:"id,omitempty" yaml:"id,omitempty" ecs:"trace.id"`
}

// Transaction defines the object located at ECS path transaction.
type Transaction struct {
	ID string `json:"id,omitempty" yaml:"id,omitempty" ecs:"transaction.id"`
}

// URL defines the object located at ECS path url.
type URL struct {
	Domain           string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"url.domain"`
	Extension        string `json:"extension,omitempty" yaml:"extension,omitempty" ecs:"url.extension"`
	Fragment         string `json:"fragment,omitempty" yaml:"fragment,omitempty" ecs:"url.fragment"`
	Full             string `json:"full,omitempty" yaml:"full,omitempty" ecs:"url.full"`
	Original         string `json:"original,omitempty" yaml:"original,omitempty" ecs:"url.original"`
	Password         string `json:"password,omitempty" yaml:"password,omitempty" ecs:"url.password"`
	Path             string `json:"path,omitempty" yaml:"path,omitempty" ecs:"url.path"`
	Port             int64  `json:"port,omitempty" yaml:"port,omitempty" ecs:"url.port"`
	Query            string `json:"query,omitempty" yaml:"query,omitempty" ecs:"url.query"`
	RegisteredDomain string `json:"registered_domain,omitempty" yaml:"registered_domain,omitempty" ecs:"url.registered_domain"`
	Scheme           string `json:"scheme,omitempty" yaml:"scheme,omitempty" ecs:"url.scheme"`
	TopLevelDomain   string `json:"top_level_domain,omitempty" yaml:"top_level_domain,omitempty" ecs:"url.top_level_domain"`
	Username         string `json:"username,omitempty" yaml:"username,omitempty" ecs:"url.username"`
}

// User defines the object located at ECS path user.
type User struct {
	Domain   string    `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"user.domain"`
	Email    string    `json:"email,omitempty" yaml:"email,omitempty" ecs:"user.email"`
	FullName string    `json:"full_name,omitempty" yaml:"full_name,omitempty" ecs:"user.full_name"`
	Group    UserGroup `json:"group,omitempty" yaml:"group,omitempty" ecs:"user.group"`
	Hash     string    `json:"hash,omitempty" yaml:"hash,omitempty" ecs:"user.hash"`
	ID       string    `json:"id,omitempty" yaml:"id,omitempty" ecs:"user.id"`
	Name     string    `json:"name,omitempty" yaml:"name,omitempty" ecs:"user.name"`
}

// UserGroup defines the object located at ECS path user.group.
type UserGroup struct {
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" ecs:"user.group.domain"`
	ID     string `json:"id,omitempty" yaml:"id,omitempty" ecs:"user.group.id"`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" ecs:"user.group.name"`
}

// UserAgent defines the object located at ECS path user_agent.
type UserAgent struct {
	Device   UserAgentDevice `json:"device,omitempty" yaml:"device,omitempty" ecs:"user_agent.device"`
	Name     string          `json:"name,omitempty" yaml:"name,omitempty" ecs:"user_agent.name"`
	Original string          `json:"original,omitempty" yaml:"original,omitempty" ecs:"user_agent.original"`
	OS       UserAgentOS     `json:"os,omitempty" yaml:"os,omitempty" ecs:"user_agent.os"`
	Version  string          `json:"version,omitempty" yaml:"version,omitempty" ecs:"user_agent.version"`
}

// UserAgentDevice defines the object located at ECS path user_agent.device.
type UserAgentDevice struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"user_agent.device.name"`
}

// UserAgentOS defines the object located at ECS path user_agent.os.
type UserAgentOS struct {
	Family   string `json:"family,omitempty" yaml:"family,omitempty" ecs:"user_agent.os.family"`
	Full     string `json:"full,omitempty" yaml:"full,omitempty" ecs:"user_agent.os.full"`
	Kernel   string `json:"kernel,omitempty" yaml:"kernel,omitempty" ecs:"user_agent.os.kernel"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" ecs:"user_agent.os.name"`
	Platform string `json:"platform,omitempty" yaml:"platform,omitempty" ecs:"user_agent.os.platform"`
	Version  string `json:"version,omitempty" yaml:"version,omitempty" ecs:"user_agent.os.version"`
}

// VLAN defines the object located at ECS path vlan.
type VLAN struct {
	ID   string `json:"id,omitempty" yaml:"id,omitempty" ecs:"vlan.id"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" ecs:"vlan.name"`
}

// Vulnerability defines the object located at ECS path vulnerability.
type Vulnerability struct {
	Category       string               `json:"category,omitempty" yaml:"category,omitempty" ecs:"vulnerability.category"`
	Classification string               `json:"classification,omitempty" yaml:"classification,omitempty" ecs:"vulnerability.classification"`
	Description    string               `json:"description,omitempty" yaml:"description,omitempty" ecs:"vulnerability.description"`
	Enumeration    string               `json:"enumeration,omitempty" yaml:"enumeration,omitempty" ecs:"vulnerability.enumeration"`
	ID             string               `json:"id,omitempty" yaml:"id,omitempty" ecs:"vulnerability.id"`
	Reference      string               `json:"reference,omitempty" yaml:"reference,omitempty" ecs:"vulnerability.reference"`
	ReportID       string               `json:"report_id,omitempty" yaml:"report_id,omitempty" ecs:"vulnerability.report_id"`
	Scanner        VulnerabilityScanner `json:"scanner,omitempty" yaml:"scanner,omitempty" ecs:"vulnerability.scanner"`
	Score          VulnerabilityScore   `json:"score,omitempty" yaml:"score,omitempty" ecs:"vulnerability.score"`
	Severity       string               `json:"severity,omitempty" yaml:"severity,omitempty" ecs:"vulnerability.severity"`
}

// VulnerabilityScanner defines the object located at ECS path vulnerability.scanner.
type VulnerabilityScanner struct {
	Vendor string `json:"vendor,omitempty" yaml:"vendor,omitempty" ecs:"vulnerability.scanner.vendor"`
}

// VulnerabilityScore defines the object located at ECS path vulnerability.score.
type VulnerabilityScore struct {
	Base          float64 `json:"base,omitempty" yaml:"base,omitempty" ecs:"vulnerability.score.base"`
	Environmental float64 `json:"environmental,omitempty" yaml:"environmental,omitempty" ecs:"vulnerability.score.environmental"`
	Temporal      float64 `json:"temporal,omitempty" yaml:"temporal,omitempty" ecs:"vulnerability.score.temporal"`
	Version       string  `json:"version,omitempty" yaml:"version,omitempty" ecs:"vulnerability.score.version"`
}
